{
    "deck_name": "Computer Science Level 2",
    "deck_id": 987654321,
    "cards": [
        {
            "front": "Metadata",
            "back": "Data that provides information about other data.",
            "tags": [
                "basic_cs"
            ]
        },
        {
            "front": "Pointer",
            "back": "A variable that stores the memory address of another variable.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Recursion",
            "back": "A programming technique where a function calls itself to solve a problem.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Queue",
            "back": "A data structure that follows the FIFO (First-In-First-Out) principle.",
            "tags": [
                "intermediate_cs",
                "data_structures"
            ]
        },
        {
            "front": "Stack",
            "back": "A data structure that follows the LIFO (Last-In-First-Out) principle.",
            "tags": [
                "intermediate_cs",
                "data_structures"
            ]
        },
        {
            "front": "TCP/IP",
            "back": "Transmission Control Protocol/Internet Protocol - the suite of communication protocols used for the internet.",
            "tags": [
                "intermediate_cs",
                "networking"
            ]
        },
        {
            "front": "XML",
            "back": "eXtensible Markup Language - a markup language that defines rules for encoding documents.",
            "tags": [
                "basic_cs"
            ]
        },
        {
            "front": "Big O Notation",
            "back": "A way of describing the efficiency of an algorithm in terms of the input size.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Static Method",
            "back": "A method that doesn't modify the state of the class or the instance it belongs to. These are often used for utility or helper methods and can be accessed on the class.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Class Method",
            "back": "A method that modifies the state of the class it belongs to, rather than an instance. It takes 'cls' as the first parameter and can be accessed on the class. These are often used for factory methods or methods that affect the class as a whole.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Instance Method",
            "back": "A method that operates on an instance of the class and can access and modify the instance's state. It takes 'self' as the first parameter and can be accessed on the instance. Use case: Instance methods are used to manipulate the data of a specific object.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Property Method",
            "back": "A method that acts like an attribute, allowing customized access to instance variables. It is used to define getters, setters, and deleters using the '@property' decorator and related decorators. Use case: Property methods are used to control access to instance variables, providing a way to add validation logic.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Abstract Method",
            "back": "A method declared in an abstract class using the '@abstractmethod' decorator. It must be implemented by any subclass that inherits from the abstract class. Use case: Abstract methods are used to define a common interface for all subclasses, enforcing a contract that the subclasses must follow.",
            "tags": [
                "intermediate_cs"
            ]
        }
    ]
}
