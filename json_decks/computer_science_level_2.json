{
    "deck_name": "Computer Science Level 2",
    "deck_id": 987654321,
    "cards": [
        {
            "front": "Metadata",
            "back": "Data that provides information about other data.",
            "tags": [
                "basic_cs"
            ]
        },
        {
            "front": "Pointer",
            "back": "A variable that stores the memory address of another variable.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Recursion",
            "back": "A programming technique where a function calls itself to solve a problem.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Queue",
            "back": "A data structure that follows the FIFO (First-In-First-Out) principle.",
            "tags": [
                "intermediate_cs",
                "data_structures"
            ]
        },
        {
            "front": "Stack",
            "back": "A data structure that follows the LIFO (Last-In-First-Out) principle.",
            "tags": [
                "intermediate_cs",
                "data_structures"
            ]
        },
        {
            "front": "TCP/IP",
            "back": "Transmission Control Protocol/Internet Protocol - the suite of communication protocols used for the internet.",
            "tags": [
                "intermediate_cs",
                "networking"
            ]
        },
        {
            "front": "XML",
            "back": "eXtensible Markup Language - a markup language that defines rules for encoding documents.",
            "tags": [
                "basic_cs"
            ]
        },
        {
            "front": "Big O Notation",
            "back": "A way of describing the efficiency of an algorithm in terms of the input size.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Static Method",
            "back": "A method that doesn't modify the state of the class or the instance it belongs to. These are often used for utility or helper methods and can be accessed on the class.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Class Method",
            "back": "A method that modifies the state of the class it belongs to, rather than an instance. It takes 'cls' as the first parameter and can be accessed on the class. These are often used for factory methods or methods that affect the class as a whole.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Instance Method",
            "back": "A method that operates on an instance of the class and can access and modify the instance's state. It takes 'self' as the first parameter and can be accessed on the instance. Use case: Instance methods are used to manipulate the data of a specific object.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Property Method",
            "back": "A method that acts like an attribute, allowing customized access to instance variables. It is used to define getters, setters, and deleters using the '@property' decorator and related decorators. Use case: Property methods are used to control access to instance variables, providing a way to add validation logic.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "Abstract Method",
            "back": "A method declared in an abstract class using the '@abstractmethod' decorator. It must be implemented by any subclass that inherits from the abstract class. Use case: Abstract methods are used to define a common interface for all subclasses, enforcing a contract that the subclasses must follow.",
            "tags": [
                "intermediate_cs"
            ]
        },
        {
            "front": "State Machine",
            "back": "A computational model used to design algorithms, which consists of a set of states, transitions between states, and actions. Use case: State machines are used to model systems with a limited number of specific states, such as vending machines or user interfaces.",
            "tags": [
                "intermediate_cs",
                "algorithms",
                "design_patterns"
            ]
        },
        {
            "front": "Finite State Machine",
            "back": "A type of state machine with a finite number of states, transitions between those states, and actions. Use case: Finite state machines are used to design control systems, parsers, and user input handling systems.",
            "tags": [
                "intermediate_cs",
                "algorithms",
                "design_patterns"
            ]
        },
        {
            "front": "Finite State Machine",
            "back": "A type of state machine with a finite number of states, transitions between those states, and actions. Use case: Finite state machines are used to design control systems, parsers, and user input handling systems.",
            "tags": [
                "intermediate_cs",
                "algorithms",
                "design_patterns"
            ]
        },
        {
            "front": "Finite State Machine",
            "back": "A type of state machine with a finite number of states, transitions between those states, and actions. Use case: Finite state machines are used to design control systems, parsers, and user input handling systems.",
            "tags": [
                "intermediate_cs",
                "algorithms",
                "design_patterns"
            ]
        },
        {
            "front": "Subroutine",
            "back": "A subroutine is a small section of a program that performs a specific task. You can think of it like a recipe for one dish in a cookbook. Instead of writing the same instructions multiple times, you write them once as a subroutine and use it whenever needed. Example: A subroutine might add two numbers together and return the result.",
            "tags": [
                "intermediate_cs",
                "programming_concepts"
            ]
        },
        {
            "front": "Coroutine",
            "back": "A coroutine is similar to a subroutine, but with one key difference: it can pause its work and come back to it later. Think of it like a person juggling multiple tasks, switching between them without finishing one completely before moving to the next. Example: A coroutine could handle user input in a game, pausing to wait for the next key press before continuing.",
            "tags": [
                "intermediate_cs",
                "concurrency",
                "programming_concepts"
            ]
        },
        {
            "front": "Concurrency",
            "back": "Concurrency is when multiple tasks are executed at the same time, but not necessarily simultaneously. It's like cooking different parts of a meal at the same time, switching between tasks to make sure everything is ready together. Example: Handling multiple web requests at the same time on a server is a common use of concurrency.",
            "tags": [
                "intermediate_cs",
                "concurrency",
                "programming_concepts"
            ]
        },
        {
            "front": "Thread",
            "back": "A thread is the smallest unit of a program that can run independently. Think of it as a single worker in a factory, doing one specific job. Example: In a web browser, one thread might be responsible for rendering the page while another handles user input.",
            "tags": [
                "intermediate_cs",
                "concurrency",
                "programming_concepts"
            ]
        },
        {
            "front": "Asynchronous Programming",
            "back": "Asynchronous programming allows tasks to run separately from the main program flow, without waiting for other tasks to complete. It's like sending out invitations and continuing to plan a party while waiting for RSVPs to come in. Example: An app might download data from the internet in the background while you continue to use other features.",
            "tags": [
                "intermediate_cs",
                "concurrency",
                "programming_concepts"
            ]
        },
        {
            "front": "Mutex",
            "back": "A mutex (short for mutual exclusion) is a tool used in programming to prevent multiple threads from accessing the same resource at the same time. It's like a key to a room; only one person can use the key to enter the room at a time, ensuring no one else can come in until the key is available again. Example: A mutex might be used to control access to a shared variable in a multi-threaded program.",
            "tags": [
                "intermediate_cs",
                "concurrency",
                "programming_concepts"
            ]
        },
        {
            "front": "Event Loop",
            "back": "An event loop is a programming structure that waits for and dispatches events or messages in a program. It works like a receptionist, waiting for tasks to come in and directing them to the right person. Example: In a web server, the event loop waits for incoming requests and processes them one by one.",
            "tags": [
                "intermediate_cs",
                "concurrency",
                "programming_concepts"
            ]
        }
    ]
}
